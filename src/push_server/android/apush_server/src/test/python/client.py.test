# -*-coding:utf-8 -*- 
import tornado.ioloop
import tornado.iostream
import socket
import json
import protocol

class ApushClient(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.token = "720c9fc6a0"
        self.last_msg_id = '240'
        self.head = ''
        
    def connect(self):
        self.sock_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
        self.stream = tornado.iostream.IOStream(self.sock_fd)
        self.stream.connect((self.host, self.port), self.login)
        
    def recv_cb(self, data):
        self.head = data
        result = protocol.parse_msg(data)
        print "read from server, head: ", result
        length = result['length']
        self.stream.read_bytes(length, self.parse_msg)
        
    def parse_msg(self, data):
        msg = self.head + data
        result = protocol.parse_msg(msg)
        print "read from server, body: ", result
        
    def login(self):
        payload = {"app_name":"aphone", "last_msg_id":self.last_msg_id, "mac":"78f5fd6d6d6f", "token":self.token, "version":"2.6.1.0"}
        msg = json.dumps(payload)
        print "login msg: ", msg
        encryp_msg = protocol.build_msg(protocol.proto_login_req, msg)
        self.stream.write(encryp_msg)
        self.stream.read_bytes(protocol.msg_head_length, self.recv_cb)
        
def main():
    try:
        io_loop = tornado.ioloop.IOLoop.instance()
        c1 = ApushClient("192.168.16.155", 80)
        c1.connect()
        io_loop.start()
    except Exception as e:
        print e
        
        
if __name__ == "__main__":
    main()
    
    