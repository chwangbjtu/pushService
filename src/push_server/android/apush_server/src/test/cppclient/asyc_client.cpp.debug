#include<stdlib.h>
#include <fcntl.h>
#include<string.h>
#include<errno.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include <ifaddrs.h>
#include <iostream>

#include <arpa/inet.h>
#include <unistd.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <time.h>
#include <stdlib.h>

#include <pthread.h>
#include <sys/time.h>
#include <list>
#include <vector>


#include "json/json.h"
#include "dbg.h"

//g++ main.cpp -lpthread

using namespace std;

stringstream ss;
//string g = "{\"fudid\":\"782BCBA20961\",\"mac\":\"782BCBA20961\",\"version\":\"1.2.3.4\",\"last_msg_id\":\"0\"}"
string gb = "{\"fudid\":\"";//782BCBA20961
string ge = "\",\"mac\":\"782BCBA20961\",\"version\":\"1.2.3.4\",\"last_msg_id\":\"0\"}";
vector<string> loginmsg;
vector<string> htbtmsg;
vector<string> pushmsg;
vector<list<string> > recvmsgid;
vector<int> loginflag;

string shost;

#pragma pack(1)
class header
{
public:
	unsigned short _version;
	unsigned short _type;
	unsigned int _length;
};

string gmsgid;

class rresp
{
public:
    unsigned short _version;
    unsigned short _type;
    unsigned int _length;
	unsigned int _msgid;
};

#pragma pack()

string get_host()
{
    struct ifaddrs * ifAddrStruct=NULL;
    void * tmpAddrPtr=NULL;

    getifaddrs(&ifAddrStruct);

    while (ifAddrStruct!=NULL) {
        if (ifAddrStruct->ifa_addr->sa_family==AF_INET) { // check it is IP4
            tmpAddrPtr=&((struct sockaddr_in *)ifAddrStruct->ifa_addr)->sin_addr;
            char addressBuffer[INET_ADDRSTRLEN];
            inet_ntop(AF_INET, tmpAddrPtr, addressBuffer, INET_ADDRSTRLEN);
            string str(ifAddrStruct->ifa_name);
            if ( str.find("lo") == string::npos)
            {
                string tname(addressBuffer);
                return tname;
            }
        }
        ifAddrStruct=ifAddrStruct->ifa_next;
    }
    string ttname;
    return ttname;
}

string get_msg(string type,int i)
{
    string str;
    str.assign(sizeof(header),'\0');
    header * ph = (header *)str.data();
    ph->_version = htons(1);
    if( type == "login")
    {
        ph->_type = htons(1);
        stringstream ss;
        ss<<gb<<shost<<"."<<i<<ge;
        ph->_length = htonl(ss.str().size());
        str.append(ss.str());
    }
    else if( type == "htbt")
    {
        ph->_type = htons(2);
        ph->_length = 0;
    }
    else if ( type == "push")
    {
        string ttstr;
        int size = recvmsgid[i].size();
        //for(int j=0;j<size;j++)
        list<string>::iterator iter = recvmsgid[i].begin();
        //DBG_INFO("msg num:%d",recvmsgid[i].size());
        for( ;iter !=  recvmsgid[i].end();iter++)
        {
            string str1;
            str1.assign(sizeof(rresp),'\0');
            rresp * ph = (rresp *)str1.data();
            ph->_version = htons(1);
            ph->_type = htons(3);
            ph->_length = htonl(4);
            ph->_msgid = htonl(atoi((*iter).data()));
            //DBG_INFO("msg id %s",(*iter).data());
            //string smsgid = recvmsgid[i].pop_back();
            //ph->_msgid = htonl(atoi(smsgid.data()));
            ttstr.append(str1);
        }
        recvmsgid[i].clear();
        str = ttstr;
    }

    return str;
}

vector<int> fds;

int send_msg(int fd,string& msg)
{
	int size = 0;
	int n =  send(fd,msg.data(),msg.size(),0);
	size = n;
	while( size < msg.size())
	{
		if ( n == 0)
			return 0;
		else if ( n < 0)
			;
		else if ( size > 0 )
			size += n;

		n =  send(fd,msg.data(),msg.size(),0);
	}
	return 0;
}

int recv_msg(int fd,string& msg)
{
	int n = 0;
	const int BUF_LEN = 1024;
    char buf[BUF_LEN] = {0};
    ssize_t recv_len = 0;
    while((recv_len = recv(fd, buf, BUF_LEN, 0)) > 0)
    {
        msg.append(buf, recv_len);
		break;
    }
    if(recv_len < 0 && (errno != EAGAIN && errno != EWOULDBLOCK))
    {
        return -1;
    }
    else if(recv_len == 0)
    {
        return -1;
    }
	return 0;
}

int open_fd(unsigned int ip, unsigned short port)
{
	int sockfd = -1;
    struct sockaddr_in dest_addr; //destnation ip info

    if(-1==(sockfd=socket(AF_INET,SOCK_STREAM,0)))
    {
    	cout<<"create error"<<endl;
        return -1;
    }
	
	int opts = fcntl(sockfd, F_GETFL);
    if(opts < 0)
        return -1;
    opts = opts | O_NONBLOCK;
    if(fcntl(sockfd, F_SETFL, opts) < 0)
        return -1;
	

    dest_addr.sin_family = AF_INET;
    dest_addr.sin_addr.s_addr = ip;
    dest_addr.sin_port = port;

    //DBG_INFO("%u,%d",ip,port);
    int err = connect(sockfd,(struct sockaddr*)&dest_addr,sizeof(struct sockaddr));

    if(err != 0)
    {
        if(errno != EINPROGRESS && errno != EALREADY)
        {
            DBG_ERROR("connect error");
            close(sockfd);
            return -1;
        }
    }

	return sockfd;
}

int gopen_fd(int num,unsigned int ip,unsigned short port)
{
	for(int i=0;i<num;i++)
	{
		int fd = open_fd(ip,port);
		if ( fd > 0)
		{
			fds.push_back(fd);
		}
	}
	return 0;
}

int gsend_msg()
{
	for(int i=0;i<fds.size();i++)
	{
		string tmsg;
		send_msg(fds[i],tmsg);
	}
	return 0;
}

int grecv_msg()
{
	string msg;
	for(int i=0;i<fds.size();i++)
    {
		msg = "";
        recv_msg(fds[i],msg);
		header * ph = (header*)(msg.data());
		if ( ntohl(ph->_length) + 8 > msg.size())
		{
			//DBG_INFO("recv size:%d,length :%d",msg.size(),ntohl(ph->_length) + 8);
		}
		else
		{
		    DBG_INFO("recv msg,%d",msg.size());
			char * pd = (char *)(msg.data());
            int offset = 0;
			while(offset <= msg.size())
            {
			    ph = (header*)(pd + offset);
                int len = ntohl(ph->_length) + offset + 8;
                if (  ntohs(ph->_type) == 0x0f03)
                {
                    DBG_INFO("recv push:%s",pd+8);
                    string tstr = msg.substr(offset+8,msg.size()-offset-8);
                    Json::Reader reader;
                    Json::Value value;
                    if (  reader.parse(tstr,value))
                    {
                        gmsgid = value["msg_id"].asString();
                        DBG_INFO("msgid is : %s",gmsgid.data());
                        recvmsgid[i].push_back(gmsgid);
                    }
                }
                else if ( ntohs(ph->_type) == 0x0f01)
                {
                    DBG_INFO("recv login resp");
                }
                else if( ntohs(ph->_type) == 0x0f02)
                {
                    DBG_INFO("recv htbt resp");
                }

                offset += ( 8 + ntohl(ph->_length));
                if ( offset >= msg.size())
                    break;
            }
		}
    }
    return 0;
}

//a.out ip port threadnum
int main(int argc,char**argv)
{
        if ( argc != 4)
        {
                cout<<"a.out ip port clientnum"<<endl;
                return -1;
        }

        shost = get_host();
        if( shost.size() == 0)
        {
            cout<<"get host error"<<endl;
            return 0;
        }

		unsigned int ip;
		unsigned short port;

        in_addr ipaddr1;
        memset(&ipaddr1,0,sizeof(ipaddr1));
        if(inet_pton(AF_INET,argv[1],(struct in_addr*)&ipaddr1)>0)
        {   
                ip = ipaddr1.s_addr;
        }

        port = htons(atoi(argv[2]));
        int client_num = atoi(argv[3]);


		gopen_fd(client_num,ip,port);
        DBG_INFO("-------open fd num:%d",fds.size());
        for(int i=0;i<fds.size();i++)
        {
            list<string> tlist;
            recvmsgid.push_back(tlist);
            loginflag.push_back(0);
        }
		int j = 0;
        sleep(1);
        while(1)
        {
				for(int i=0;i<fds.size();i++)
				{
                    string msg;

					if ( loginflag[i] == 0)
                    {
                        DBG_INFO("");
                        msg = get_msg("login",i);
                        cout<<(msg.data()+8)<<endl;
						send_msg(fds[i],msg);
                        DBG_INFO("login end");
				        loginflag[i] = 1;
                    }
					else
					{
						if ( recvmsgid[i].size() == 0)
						{
                            msg = get_msg("htbt",i);
							send_msg(fds[i],msg);
						}
						else
						{
                            DBG_INFO("push");
                            msg = get_msg("push",i);
							send_msg(fds[i],msg);
							recvmsgid[i].clear();
						}
					}
					grecv_msg();
				}
                sleep(5);
        }

        return 0;
}
