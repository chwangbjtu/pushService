import json
import re
import traceback
import base64
import urllib2
import urlparse
from scrapy.selector import Selector
from urllib import urlencode

class parse:
    def __init__(self):
        pass
    def parse_url(self,url):
        try:
            #decode url
            site = self.guess_site(url)
            if site == 'youku':
                return self.parse_yk_url(url)
            elif site=='iqiyi':
                return self.parse_qy_url(url)
            elif site=='pptv':
                return self.parse_pptv_url(url)
            elif site=='ku6':
                return self.parse_k6_url(url)
            elif site=='56':
                return self.parse_56_url(url)
            elif site=='qq':
                return self.parse_qq_url(url)
            elif site=='gamefy':
                return self.parse_gamefy_url(url)
            else:
                return []
        except Exception,e:
            return []
    def guess_site(self,url):
        try:
            special_site = ['61', 'kumi']
            for s in special_site:
                if url.startswith('http://%s.' % s):
                    return s
            
            r = re.compile('http[s]{0,1}://.+\.(.*?)\.(com.cn)')
            m = r.match(url.split('?')[0])
            if m:
                return m.group(1)

            r = re.compile('http[s]{0,1}://.+\.(.*?)\.[com|cn|tv]')
            m = r.match(url.split('?')[0])
            if m:
                return m.group(1)
        except Exception as e:
            return ""
            #print traceback.format_exc()
            
    def http_get(self, url):
        data = urllib2.urlopen(url, timeout=15)
        res = data.read()
        return res
            
    def parse_gamefy_url(self, url):
        try:
            res = self.http_get(url)
            selector = Selector(text=res)
            
            play_url = ''
            #yuoku and qq
            sel = selector.xpath('//div[@class="area"]/div[@style="float:left"]/iframe/@src').extract()
            if sel:
                play_url = sel[0]
                
            if play_url:
                site = self.guess_site(play_url)
                if site == 'youku':
                    piece = play_url.split('/')
                    if piece:
                        vid = piece[-1]
                        youku_url = "http://v.youku.com/v_show/id_%s.html" % (vid)
                        return self.parse_yk_url(youku_url)
                
                elif site == 'qq':
                    query = urlparse.urlparse(play_url).query
                    query_dict = urlparse.parse_qs(query)
                    vid = query_dict['vid'][0]
                    #get url from vid
                    index_url = "http://v.qq.com/page/y/o/0/%s.html" % (vid)
                    return self.parse_qq_url(index_url)
                    
                    # qq_res = self.http_get(index_url)
                    # qq_selector = Selector(text=qq_res)
                    # sel = qq_selector.xpath("//script/text()").extract()
                    # if sel:
                        # play_url = sel[0]
                        # start = play_url.find('"')
                        # play_url = play_url[start + 1: -1]
                        # print play_url
                        # return self.parse_qq_url(play_url)
                        
                else:
                    pass
                    
            else:
                #17173
                sel = selector.xpath('//div[@class="area"]//embed[@id="MainPlayer"]/@src').extract()
                if sel:
                    play_url = sel[0]
                    find_str = "url='"
                    start = play_url.find(find_str)
                    play_url = play_url[start + len(find_str): -1]
                    return self.parse_17173_url(play_url)
                    
                #iqiyi
                else:
                    patten = re.compile('vid : \"(\w+)\"')
                    match_result = patten.search(res)
                    if match_result:
                        vid = match_result.groups()[0]
                        if vid:
                            vid_url = "http://v.gamefy.cn/iqiyi/getSWF/%s" % (vid)
                            gamefy_res = self.http_get(vid_url)
                            gamefy_res = gamefy_res[2:-2]
                            gamefy_res = gamefy_res.replace('\\', '')
                            query = urlparse.urlparse(gamefy_res).query
                            query_dict = urlparse.parse_qs(query)
                            tvId = query_dict['tvId'][0]
                            
                            iqiyi_url = "http://mixer.video.iqiyi.com/jp/mixin/videos/%s" % (tvId)
                            iqiyi_res = self.http_get(iqiyi_url)
                            iqiyi_res = iqiyi_res[13:]
                            iqiyi_res_json = json.loads(iqiyi_res)
                            play_url = iqiyi_res_json['url']
                            return self.parse_qy_url(play_url)
                
                        
        except Exception,e:
            print traceback.format_exc()
            
    def parse_qq_url(self,url):
        try:
            url_list = []
            data = self.parse_from_flvcd(url)
            json_data = json.loads(data)
            if "error" in json_data:
                return url_list
            formatCodeList = json_data['formatCodeList'] if "formatCodeList" in json_data else None
            format = json_data['format'] if "format" in json_data else None
            type = formatCodeList.split('|')
            if type[len(type)-1] == format:
                if "TYPE" not in json_data:
                    return url_list
                if "DIRECT"==json_data["TYPE"]:
                    if "V" not in json_data:
                        return url_list
                    for item in json_data["V"]:
                        if "U" not in item:
                            continue
                        url_list.append(item["U"])
                    return url_list
                else:
                    if "ts" not in json_data or "te" not in json_data or "V" not in json_data:
                        return url_list
                    for item in json_data["V"]:
                        if "U" not in item:
                            continue
                        url = self.parse_qq_url_second(json_data["ts"],json_data["te"],item["U"])
                        url_list.append(url)
                    return url_list
                return url_list
            else:
                data = self.parse_from_flvcd(url,format=type[len(type)-1])
                json_data = json.loads(data)
                if "TYPE" not in json_data:
                    return url_list
                if "DIRECT"==json_data["TYPE"]:
                    if "V" not in json_data:
                        return url_list
                    for item in json_data["V"]:
                        if "U" not in item:
                            continue
                        url_list.append(item["U"])
                    return url_list
                else:
                    if "ts" not in json_data or "te" not in json_data or "V" not in json_data:
                        return url_list
                    for item in json_data["V"]:
                        if "U" not in item:
                            continue
                        url = self.parse_qq_url_second(json_data["ts"],json_data["te"],item["U"])
                        url_list.append(url)
                    return url_list
                return url_list
                
        except Exception,e:
            #print traceback.format_exc()
            return url_list
    def parse_qq_url_second(self,ts,te,url):
        try:
            string =""
            begin = base64.b64decode(ts)
            end = base64.b64decode(te)
            data = urllib2.urlopen(url,timeout=15)
            string=data.read()
            string =string[string.find(begin)+len(begin):]
            string =string[:string.find(end)]
            return string
        except Exception,e:
            #print traceback.format_exc()
            return string
    
    def parse_56_url(self,url):
        try:
            url_list = []
            data = self.parse_from_flvcd(url)
            json_data = json.loads(data)
            if "error" in json_data:
                return url_list
            formatCodeList = json_data['formatCodeList'] if "formatCodeList" in json_data else None
            format = json_data['format'] if "format" in json_data else None
            type = formatCodeList.split('|')
            if type[len(type)-1] == format:
                if "TYPE" not in json_data:
                    return url_list
                if json_data["TYPE"]=="DIRECT":
                    if "V" not in json_data:
                        return url_list
                    for item in json_data["V"]:
                        url_list.append(item["U"])
                return url_list
            else:
                data = self.parse_from_flvcd(url,format=type[len(type)-1])
                json_data=json.loads(data)
                if "TYPE" not in json_data:
                    return url_list
                if json_data["TYPE"]=="DIRECT":
                    if "V" not in json_data:
                        return url_list
                    for item in json_data["V"]:
                        url_list.append(item["U"])
                return url_list
        except Exception,e:
            #print traceback.format_exc()
            return url_list
    def parse_k6_url(self,url):
        try:
            url_list = []
            data = self.parse_from_flvcd(url)
            json_data = json.loads(data)
            if "error" in json_data:
                return url_list
            formatCodeList = json_data['formatCodeList'] if "formatCodeList" in json_data else None
            format = json_data['format'] if "format" in json_data else None
            type = formatCodeList.split('|')
            if type[len(type)-1] == format:
                if "TYPE" not in json_data:
                    return url_list
                if json_data["TYPE"]=="DIRECT":
                    if "V" not in json_data:
                        return url_list
                    for item in json_data["V"]:
                        url_list.append(item["U"])
                return url_list
            else:
                data = self.parse_from_flvcd(url,format=type[len(type)-1])
                json_data=json.loads(data)
                if "TYPE" not in json_data:
                    return url_list
                if json_data["TYPE"]=="DIRECT":
                    if "V" not in json_data:
                        return url_list
                    for item in json_data["V"]:
                        url_list.append(item["U"])
                return url_list
        except Exception,e:
            #print traceback.format_exc()
            return url_list
    def parse_pptv_url(self,url):
        try:
            url_list = []
            data = self.parse_from_flvcd(url)
            json_data = json.loads(data)
            if "error" in json_data:
                return url_list
            formatCodeList = json_data['formatCodeList'] if "formatCodeList" in json_data else None
            format = json_data['format'] if "format" in json_data else None
            type = formatCodeList.split('|')
            if type[len(type)-1] == format:
                if "C" not in json_data or "REFERER" not in json_data or "V" not in json_data or "TYPE" not in json_data:
                    return url_list
                #referer=json_data["REFERER"]
                type = json_data["TYPE"]
                if type=="DIRECT":
                    for item in json_data["V"]:
                        url=item["U"]
                        url_list.append(url)
                else:
                    #url=json["C"]
                    if "ts" not in json_data or "te" not in json_data:
                        return url_list
                    else:
                        host = self.parse_pptv_url_second(json_data["ts"],json_data["te"],json_data["C"])
                        if host=="":
                            return url_list
                        for item in json_data["V"]:
                            #url=item["U"]+"&referer="+referer
                            url=item["U"]
                            uri = url[url.find("http://")+len("http://"):]
                            uri = uri[uri.find("/"):]
                            url="http://"+host+uri
                            url_list.append(url)
                return url_list
            else:
                data = self.parse_from_flvcd(url,format=type[len(type)-1])
                json_data = json.loads(data)
                if "C" not in json_data or "REFERER" not in json_data or "V" not in json_data or "TYPE" not in json_data:
                    return url_list
                #referer=json_data["REFERER"]
                type = json_data["TYPE"]
                if type=="DIRECT":
                    for item in json_data["V"]:
                        url=item["U"]
                        url_list.append(url)
                else:
                    #url=json["C"]
                    if "ts" not in json_data or "te" not in json_data:
                        return url_list
                    else:
                        host = self.parse_pptv_url_second(json_data["ts"],json_data["te"],json_data["C"])
                        if host=="":
                            return url_list
                        for item in json_data["V"]:
                            #url=item["U"]+"&referer="+referer
                            url=item["U"]
                            uri = url[url.find("http://")+len("http://"):]
                            uri = uri[uri.find("/"):]
                            url="http://"+host+uri
                            url_list.append(url)
                return url_list
        except Exception,e:
            #print traceback.format_exc()
            return url_list
    def parse_pptv_url_second(self,ts,te,url):
        try:
            string = ""
            begin = base64.b64decode(ts)
            end = base64.b64decode(te)
            data = urllib2.urlopen(url,timeout=15)
            string=data.read()
            string =string[string.find(begin)+len(begin):]
            string =string[:string.find(end)]
            return string
        except Exception,e:
            #print traceback.format_exc()
            return string
        
    def parse_yk_url(self,url):
        try:
            url_list = []
            data = self.parse_from_flvcd(url)
            json_data = json.loads(data)
            if "error" in json_data:
                return url_list
            formatCodeList = json_data['formatCodeList'] if "formatCodeList" in json_data else None
            format = json_data['format'] if "format" in json_data else None
            type = formatCodeList.split('|')
            if type[len(type)-1] == format:
                if "V" not in json_data:
                    return url_list
                url_lists = json_data['V']
                for item in url_lists:
                    url_list.append(item["U"])
                return url_list
            else:
                data = self.parse_from_flvcd(url,format=type[len(type)-1])
                json_data = json.loads(data)
                if "V" not in json_data:
                    return url_list
                url_lists = json_data['V']
                for item in url_lists:
                    url_list.append(item["U"])
                return url_list
        except Exception,e:
            #print traceback.format_exc()
            return url_list
        
    def parse_qy_url(self,url):
        try:
            url_list = []
            data = self.parse_from_flvcd(url)
            json_data = json.loads(data)
            if "error" in json_data:
                return url_list
            formatCodeList = json_data['formatCodeList'] if "formatCodeList" in json_data else None
            format = json_data['format'] if "format" in json_data else None
            if not formatCodeList or not format:
                return url_list
            type = formatCodeList.split('|')
            if type[len(type)-1] == format:
                if "V" not in json_data:
                    return url_list
                url_lists = json_data['V']
                for item in url_lists:
                    if json_data["TYPE"] == "CUSTOM":
                        tmp=self.parse_qy_url_second(json_data["ts"],json_data["te"],item["C"])
                        url_list.append(tmp)
                    else:
                        url_list.append(item["C"])
                return url_list
            else:
                data = self.parse_from_flvcd(url,format=type[len(type)-1])
                json_data = json.loads(data)
                if "V" not in json_data:
                    return url_list
                url_lists = json_data['V']
                for item in url_lists:
                    if json_data["TYPE"] == "CUSTOM":
                        tmp=self.parse_qy_url_second(json_data["ts"],json_data["te"],item["C"])
                        url_list.append(tmp)
                    else:
                        url_list.append(item["C"])
                return url_list
        except Exception,e:
            #print traceback.format_exc()
            return url_list
    def parse_qy_url_second(self,ts,te,url):
        try:
            string = ""
            begin = base64.b64decode(ts)
            begin = begin.replace('\\','')
            end = base64.b64decode(te)
            end = end.replace('\\','')
            data = urllib2.urlopen(url,timeout=15)
            string=data.read()
            string =string[string.find(begin)+len(begin):]
            string =string[:string.find(end)]
            return string
        except Exception,e:
            #print traceback.format_exc()
            return string
    
    def parse_17173_url(self, url):
        try:
            url_list = []
            data = self.parse_from_flvcd(url)
            json_data = json.loads(data)
            if "error" in json_data:
                return url_list
            formatCodeList = json_data['formatCodeList'] if "formatCodeList" in json_data else None
            format = json_data['format'] if "format" in json_data else None
            type = formatCodeList.split('|')
            if type[len(type)-1] == format:
                if "V" not in json_data:
                    return url_list
                url_lists = json_data['V']
                for item in url_lists:
                    url_list.append(item["U"])
                return url_list
            else:
                data = self.parse_from_flvcd(url,format=type[len(type)-1])
                json_data = json.loads(data)
                if "V" not in json_data:
                    return url_list
                url_lists = json_data['V']
                for item in url_lists:
                    url_list.append(item["U"])
                return url_list
        except Exception,e:
            #print traceback.format_exc()
            return url_list
    
    
    def parse_from_flvcd(self,url,format='normal'):
        try:
            res = ""
            #real_url = decode_url(url)
            req = {}
            req["format"] = format
            req["url"]=url
            data = urlencode(req)
            url_flvcd = "http://vpwind.flvcd.com/parse-fun.php?"+data
            data = urllib2.urlopen(url_flvcd,timeout=25)
            #data = urllib2.urlopen(url_flvcd)
            res = data.read()
            return res            
        except Exception,e:
            #print traceback.format_exc()
            return res
if __name__=="__main__":
    test = parse()
    #res = test.parse_url("http://m.iqiyi.com/v_19rrnr18nc.html#vfrm=19-9-0-1")
    #print "iqiyi:",res
    res = test.parse_url("http://www.iqiyi.com/v_19rrkwviac.html")
    print "youku:",res
    #res = test.parse_url("http://www.56.com/w78/play_album-aid-14295959_vid-MTM5ODY4MzI0.html")
    #print "56:",res
    #res = test.parse_url("http://v.qq.com/cover/l/lgulqofu1vc0rme.html?vid=k0019yqzyi5")
    #print "qq:",res
    #res = test.parse_url("http://v.ku6.com/show/o82skl6Uenzs5y5S0T_TTg...html")
    #print "ku6:",res
    #res = test.parse_url("http://v.pptv.com/show/qaA9u3oX3RtibicGQ.html")
    #print "pptv:",res
    #res = test.parse_from_flvcd("http://www.iqiyi.com/v_19rsrkiv60o.html")
    #print res
    #gamefy-iqiyi
    #res = test.parse_url("http://www.gamefy.cn/vplay.php?id=62201&class_id=13")
    #print res
    #gamefy-17173
    #res = test.parse_url("http://www.gamefy.cn/vplay.php?id=73404&class_id=12")
    #print res
    #gamefy-youku
    #res = test.parse_url("http://www.gamefy.cn/vplay.php?id=65949&class_id=12")
    #print res
    #gamefy-qq
    #res = test.parse_url("http://www.gamefy.cn/vplay.php?id=82891&class_id=17")
    #print res
